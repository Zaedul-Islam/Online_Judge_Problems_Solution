// UVa 10948 - The Primary Problem.cpp
#include <iostream>
#include <cmath>
using namespace std;

// prime[i] = 0, if i is prime
// prime[i] = 1, if i is not a prime
const int arraySize = 1000010;
int prime[arraySize]; // Declared globally,thus automatically assigned initially 0 to every element of the array.

void primeGenerate()
{
	int sqrtN = int(sqrt((double)1000000));
	//memset(prime, 1, sizeof(prime));
	prime[0] = prime[1] = 1;    // Since, 0 isn't prime either composite

	for (int index = 2; index <= sqrtN; index++) {
		// Have to check primes up to (sqrt(N))
		if (prime[index] == 0) {
			// so, index is a prime, so, discard all the multiples.
			// j = index * index, because it’s the first number to be colored.
			for (int k = index + index; k <= arraySize; k += index)
				prime[k] = 1;
		}
	}
} // Ends

int main()
{
	primeGenerate(); // Pre-cal
	int _integer = -1, i, range;
	while (_integer != 0) {
		scanf("%d", &_integer);
		
		if (_integer == 0)
			break;
		bool verified = false;
                                    printf("%d:\n", _integer);
		range = _integer/2;

		for (i = 1; i <= range; i++) {
			if (!(prime[i]) && !(prime[_integer - i])) {
				verified = true;
				break;
			}
		}
		if (verified == true)
			printf("%d+%d\n", i, _integer - i);

		else
			printf("NO WAY!\n");
	}
	return 0;
}

