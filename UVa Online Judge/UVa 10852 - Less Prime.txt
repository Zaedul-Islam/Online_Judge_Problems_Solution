// UVa 10852 - Less Prime.cpp
// Pretty straightforward. Do as the question asks.
// Bruteforce should be good enough.One shortcut to note is that n - (p*x) is maximized when p is 1.

#include<cstdio>
#include<cmath>
#include<iostream>
using namespace std;

const int arraySize = 10000000;
int prime[arraySize];

// Generates prime number

void sievePrime() {
	int sqrtN = int(sqrt(double(arraySize)));
	prime[0] = prime[1] = 1; // 0 & 1 aren't prime
	for (int i = 2; i <= sqrtN; i++) { // have to check primes up to (sqrt(N))
		if (prime[i] == 0) {
			// so, i is a prime, so, discard all the multiples 
			// j = i * i, because it’s the first number to be colored
			for (int k = i * i; k <= arraySize; k += i) {
				prime[k] = 1; // status of the multiple is 1
			}
		}
	}
}


int main()
{
	sievePrime(); // Pre calculation
	int testCase,input,i,p;
	scanf("%d", &testCase);
	while (testCase--) {
		scanf("%d", &input);
		i = input / 2;
		p = 1;
		while (true) {
			if (prime[i] == 0) {
				if ((p*i) <= input && ((p + 1)*i) > input) {
					printf("%d\n", i);
					break;
				}
				else
					i++;
			}
			else
				i++;
		}
	}
	return 0;
}